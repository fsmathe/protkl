% \iffalse
% prot package
% Copyright 2021 Markus Kurtz
%
% If called with nonLaTeX or with \install=y or as a batch file
% generate some nice files.  Otherwise produce documentation.
%<*ignore>
	{\def\x{LaTeX2e}\expandafter}%
	\ifcase0% if \install=y or \processbatchFile is defined or \fmtname=LaTeX2e
		\ifx\install y1\fi
		\expandafter\ifx\csname processbatchFile\endcsname\relax\else1\fi
		\ifx\fmtname\x\else1\fi
	\else\csname fi\endcsname% ... go on after here
%</ignore>
%<*install>
	\input docstrip.tex
	\askforoverwritefalse
	\keepsilent
	\preamble
	This is a prot file.
	\endpreamble
	\generate{
		\file{prot.ins}{\from{prot.dtx}{install}}
		\file{prot.drv}{\from{prot.dtx}{driver}}% for documentation
		\file{prot.sty}{\from{prot.dtx}{package}}
	}
	\usedir{testfiles}
	\generate{
		\file{prot.lvt}{\from{prot.dtx}{test}}
		\file{prot.lve}{\from{prot.dtx}{expect}}
	}
	\endbatchfile
%</install>
%<*ignore>
	\fi % end the \ifcase and produce documentation
%</ignore>
%<*driver>
	\documentclass{l3doc}
	% Allow to write |\cs|
	\MakeShortVerb{\|}
	% Index via codeline
	\CodelineIndex
	\RecordChanges
	\begin{document}
		\DocInput{prot.dtx}
	\end{document}
%</driver>
%
% \fi  end the \iffalse
%
% \title{prot}
% \author{Markus Kurtz}
% \maketitle
% Dieses Paket dient dem Schreiben von Protokollen. Besonders erlaubt es, über die anwesenden Personen, Abstimmungsergebnisse, Aufgaben und Resultate Buch zu führen.
% \section{Layout}
% Wird großteils an \pkg{KoMa-Script} abgegeben.
% Für vorläufige Protokolle (Paket-Option) werden Zeilennummern ausgegeben.
% Lädt \pkg{hyperref} und setzt Titel und Autorin gemäß den Angaben.
% Angaben zu Ort und Zeit der Sitzung werden ebenfalls für Titel im Dokument und in den PDF-Informationen genutzt.
% Angaben zu Ort und Zeit der nächsten Sitzung werden am Ende ausgegeben.
% Am Ende des Protokolls bzw.\@ vor dem Anhang erscheint zudem eine Signatur.
% Es kann eine Begrüßungs- und Abschiedsfloskel ausgegeben werden.
% \section{Personen}
% Zu Beginn des Protokolls werden Personen mit dem Befehl \cs{neuePerson} angelegt, was typischerweise über \env{personenliste} geschieht.
% Für jede Person legt \cs{neuePerson} basierend auf den Argumenten eine \meta{id} fest, definiert \cs{\meta{id}} als einfaches Makro, was \meta{name} zurückgibt und speichert einige Daten.
% Zu Beginn des Dokuments kann dann eine Anwesenheitsliste oder -tabelle ausgegeben werden.
% Hiefür werden die Personen innerhalb ihrer \meta{group} sortiert und mit ggf.\@ nötiger Zusatzinformation gemeinsam ausgegeben.
% Später kann dann bei Abstimmungsergebnissen automatisch die Gesamtstimmzahl ermittelt werden und etwa mit |\erg*00| ein einstimmiges Abstimmungsergebnis ausgegeben werden.
% Hierfür ist es natürlich nötig, auch speziell zu notieren, wann Stimmberechtigte Personen die Sitzung betreten und verlassen.
% \section{Ergebnisübersicht}
% Alle Ergebnisse werden in eine ausgelagerte Datei geschrieben und können wahlweise im Protokoll selbst erscheinen oder auch in einem Übersichtsdokument oder sonstwo.
% \section{Textbausteine}
% Der Freundlichkeit halber werden verschiedene Textbausteine etwa für Währungs- und Zeitangaben bereitgestellt sowie für Einschübe für Sitzungspausen oder andere Meta-Informationen.
% Auch nützlich sind die Möglichkeiten, Befehle zu erstellen, die bei erstmaliger Verwendung eine Erklärung bereitstellen.
% \StopEventually{\PrintIndex\PrintChanges}
%
% \setcounter{StandardModuleDepth}{1}
%
% \section{Implementation}
%
% Variablen und Konstanten für Person \meta{id} werden unter \texttt{\meta{g_/c_/}prot_person_/\meta{id}/_\meta{var}\meta{_typ/:signatur}} gespeichert.
% Dies erscheint mir ein plausibles Design zu sein, insbesondere unterstützt \LaTeX3 dies nativ mittels |:c|-Argumenten.
% TODO: Setze Macros als protected sowie nopar.
%    \begin{macrocode}
%<@@=prot>
%<*test|expect>
	\input{regression-test}
	\RequirePackage{prot}
	\RequirePackage{expl3}
	\START
	\ExplSyntaxOn
	\keys_set:nn { sys } { check-declarations }
	\debug_on:n { check-expressions }
	%\keys_set:nn { sys } { log-functions }
%<*test>
	\cs_new:Nn \@@_test:nn { \TYPE {#1} }
	\cs_new:Nn \@@_nontest:nn {#1}
%</test>
%<*expect>
	\cs_new:Nn \@@_test:nn { \TYPE {#2} }
	\cs_new:Nn \@@_nontest:nn {#2}
%</expect>
%</test|expect>
%<*package>
	\RequirePackage{expl3}
	\ProvidesExplPackage{prot}{2021-11-26}{1.0}{A prot and Fun Package}
%    \end{macrocode}
% \begin{environment}{persontable}
%   Liest gesamte Tabelle ein.
%    \begin{macrocode}
	\NewDocumentEnvironment { persontable } { b } {
		\seq_set_split:Nnn \l@@_persontable_seq \\ {#1}
		\seq_remove_all:Nn \l@@_persontable_seq { }
		\seq_map_inline:Nn \l@@_persontable_seq {
			\seq_set_split:Nnn \l@@_personrow_seq & {##1}
			\int_compare:nNnTF { \seq_count:N \l@@_personrow_seq } = 6 {
				\exp_last_unbraced:Nx \prot_newperson_frontend:nnnnnn { \@@_seq_to_tl:N \l@@_personrow_seq }
			} {
				\msg_error:nnxx { prot } { persontable / col-count }
					{ \seq_use:Nn \l@@_personrow_seq { ~\&~ } }
					{ \seq_count:N \l@@_personrow_seq }
			}
		}
	} { }
	\seq_new:N \l@@_persontable_seq
	\seq_new:N \l@@_personrow_seq
%</package>
%    \end{macrocode}
%    \begin{macrocode}
%<*test|expect>
	\TEST { persontable } {
	\cs_new:Nn \@@_test_type:nnnnnn { \TYPE { #1 | #2 | #3 | #4 | #5 | #6 } }
%<*test>
	\group_begin:
		\cs_set_eq:NN \prot_newperson_frontend:nnnnnn \@@_test_type:nnnnnn
		\begin{persontable}
			a & b & c & d & e & f \\
			q & w & e & r & t & z \\
			& Anna & - &  & foo={~bar~} & ~joah~ \\
		\end{persontable}
	\group_end:
%</test>
%<*expect>
	\@@_test_type:nnnnnn { a }{ b }{ c }{ d }{ e }{ f }
	\@@_test_type:nnnnnn { q }{ w }{ e }{ r }{ t }{ z }
	\@@_test_type:nnnnnn { }{ Anna }{ - }{  }{ foo={~bar~} }{ joah }
%</expect>
	}
%</test|expect>
%    \end{macrocode}
% \end{environment}
% \begin{macro}{\prot_newperson_frontend:nnnnnn}
%   Erstellt \meta{id} und \meta{name} mittels \cs{@@_set_idname_via_shorty:nnnn} und verarbeitet Angaben zur Gruppenzugehörigkeit, Anwesenheit und Zusatzinformationen.
%    \begin{macrocode}
%<*package>
	\str_new:N \l@@_id_str
	\tl_new:N \l@@_name_tl
	\cs_new:Npn \prot_newperson_frontend:nnnnnn #1#2#3#4 {
		\@@_set_idname_via_shorty:nnnn {#1} {#2} {#3} {#4}
		\exp_args:NVV \prot_newperson:nnnnnn \l@@_id_str \l@@_name_tl {#3} {#4}
	}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_set_idname_via_shorty:nnnn}
%   Nimmt |id, first, last, shorty|
%   Legt basierend auf dem ersten Argument \marg{shorty} fest, wie der Name abgekürzt werden soll.
%   Dazu nutzt es \pkg{l3str} und \pkg{l3tl}.
%    \begin{macrocode}
	\cs_new:Nn \@@_set_idname_via_shorty:nnnn {
		\tl_if_blank:nTF {#4} {
			\@@_set_idname:n {#2}
		} {
			\str_set:Nn \l@@_id_str {#2}
			\tl_set:Nn \l@@_name_tl {#2}
			\str_case:onF { \tl_head:w #4 {}\q_stop } {
				{=} { \tl_put_right:Nn \l@@_name_tl { ~ #3 } }
				{?} { \tl_put_right:Nx \l@@_name_tl { ~ \tl_range:nnn {#4} {2} {-1} } }
				{:} { \tl_set:Nx \l@@_name_tl { \tl_range:nnn {#4} {2} {-1} } }
				{!} { \@@_set_abbreviation:x { \tl_range:nne {#3} {1} { \tl_count:n {#4} } } }
			} {
				\@@_set_idname:n {#4}
			}
		}
		\tl_if_blank:nF {#1} { \str_set:Nn \l@@_id_str {#1} }
		\str_remove_all:Nn \l@@_id_str {~}
		\str_remove_all:Nn \l@@_id_str {-}
	}
	\cs_new:Nn \@@_set_idname:n {
		\str_set:Nn \l@@_id_str {#1}
		\tl_set:Nn \l@@_name_tl {#1}
	}
	\cs_new:Nn \@@_set_abbreviation:n {
		\str_put_right:Nn \l@@_id_str {#1}
		\tl_put_right:Nn \l@@_name_tl { \prot_nbsp: #1 . }
	}
	\cs_generate_variant:Nn \@@_set_abbreviation:n { x }
	\cs_new:Nn \prot_nbsp: { \penalty10000\  }
%</package>
%    \end{macrocode}
%   Some tests:
%    \begin{macrocode}
%<*test|expect>
	\TEST { \@@_set_idname_via_shorty:nnnn } {
%<*test>
	\cs_new:Nn \@@_test_shorty:nnnnnn {
		\@@_set_idname_via_shorty:nnnn {#3} { #1 } { #2 } {#4}
		\TYPE { { \l@@_id_str } ~ { \l@@_name_tl } }
	}
%</test>
%<*expect>
	\cs_new:Nn \@@_test_shorty:nnnnnn { \TYPE { {#5} ~ {#6} } }
%</expect>
	\cs_new:Npn \@@_test_donald:nnnn { \@@_test_shorty:nnnnnn { Donald } { Knuth } }
	\@@_test_donald:nnnn {} {} { Donald } { Donald }
	\@@_test_donald:nnnn {} { = } { Donald } { Donald ~ Knuth }
	\@@_test_donald:nnnn {} { ?Duck } { Donald } { Donald ~ Duck }
	\@@_test_donald:nnnn {} { :Don } { Donald } { Don }
	\@@_test_donald:nnnn {} { ! } { DonaldK } { Donald \prot_nbsp: K. }
	\@@_test_donald:nnnn {} { !! } { DonaldKn } { Donald \prot_nbsp: Kn. }
	% The following is weird, but you asked for it :D
	\@@_test_donald:nnnn {} { !23456 } { DonaldKnuth } { Donald \prot_nbsp: Knuth. }
	\@@_test_donald:nnnn {} { Don } { Don } { Don }
	\@@_test_donald:nnnn { DK } { Don } { DK } { Don }
	\cs_new:Npn \@@_test_anna:nnnn { \@@_test_shorty:nnnnnn { Anna-Lena } { Rot ~ Grau-Schwarz } }
	\@@_test_anna:nnnn {} {} { AnnaLena } { Anna-Lena }
	\@@_test_anna:nnnn {} { !!! } { AnnaLenaRot } { Anna-Lena \prot_nbsp: Rot . }
	\@@_test_anna:nnnn {} { !!!! } { AnnaLenaRotG } { Anna-Lena \prot_nbsp: Rot ~ G . }
	\@@_test_anna:nnnn {} { !otGrau- } { AnnaLenaRotGrau } { Anna-Lena \prot_nbsp: Rot ~ Grau- . }
	\@@_test_anna:nnnn {} { !otGrau-S } { AnnaLenaRotGrauS } { Anna-Lena \prot_nbsp: Rot ~ Grau-S . }
	}
%</test|expect>
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\prot_newperson:nnnnnn}
%   Nimmt \marg{id}, \marg{name}, \marg{first_name}, \marg{last_name}, \marg{group}, \marg{attendance}, \marg{special}, \marg{voter}.
%   Zuvor müssen diese bereits befüllt werden.
%   Dabei werden \marg{id} und \marg{name} von \prot_newperson_frontend:nnnnnn und \marg{group} und \marg{voter} protokollspezifisch festgelegt.
%   \item Der Anzeigename \meta{name} wird anhand des \meta{shortname}-Arguments festgelegt.
%   \item Die \meta{id} wird falls vorhanden und nichtleer durch das \meta{id}-Argument und andernfalls gleich zu \meta{name} festgelegt.
%   Sollte \cs{\meta{id}} bereits definiert sein, wird ein Fehler erzeugt und das Anlegen der Person abgebrochen. Ansonsten wird \cs{\meta{id}} als \meta{name} mit folgendem |\@\xspace| definiert.
%   \NB{Das |\@| sorgt dafür, dass Abstände wie bei einem normalen Wortende (also einem Kleinbuchstaben) gesetzt werden, auch wenn der Name möglicherweise mit einem Punkt oder Großbuchstaben enden sollte.}
%
%   Zuerst wird in \cs{g@@_names_prop} die \meta{id} hinterlegt bzw\@. gemeckert, falls \meta{name} bereits belegt ist.
%    \begin{macrocode}
%<*package>
	\prop_new:N \g@@_names_prop
	\str_new:N \l@@_samename_id_str
	\cs_new:Nn\prot_newperson:nnnnnn {
		\@@_tl_if_alphabetic:nTF {#1} {
			\cs_if_exist:cTF {#1} {
				\cs_if_exist:cTF { c_prot_person_/#1/id_str }
					{ \msg_error:nnn { prot } { person / id-exists } {#1} }
					{ \msg_error:nnn { prot } { person / id-iscsname } {#1} }
			} {
				\tl_const:cn {#1} { #2\@\xspace }
				\prop_get:NnNTF \g@@_names_prop {#2} \l@@_samename_id_str
					{ \msg_error:nnnnV { prot } { person / name-exists } {#2} {#1} \l@@_samename_id_str }
					{ \prop_gput:Nnn \g@@_names_prop {#2} {#1} }
%    \end{macrocode}
%   Danach werden unter \texttt{g_prot_person_/\meta{id}/} verschiedene Schlüssel befüllt:
%   |name|, |name/full|, |name/first|, |name/last|, |name/sort|, |attendance|, |group|.
%    \begin{macrocode}
				\str_set:Nn \l@@_person_str { prot_person_/#1 }
				\str_const:cn { c_\l@@_person_str/id_str } {#1}
				\tl_const:cn { c_\l@@_person_str/name_tl } {#2}
				\tl_const:cn { c_\l@@_person_str/name/first_tl } {#3}
				\tl_const:cn { c_\l@@_person_str/name/last_tl } {#4}
				\@@_parse_attendance:n {#6}
				\@@_set_attendance:
				\@@_apply_group:n {#5}
				\@@_initialize_move:
			}
		} { \msg_error:nnn { prot } { person / malformed-id } {#1} }
	}
	\str_new:N \l@@_person_str
%</package>
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_parse_attendance:n, \@@_set_attendance:n}
%   Über das Anwesenheitsfeld wird die Anwesenheit als ein Single-Choice-Wert definiert,
%   üblicherweise eins aus: x (anwesend), d (digital), e (entschuldigt), u (unentschuldigt).
%   Zusätzlich können hier noch weitere Attribute festgelegt werden: p (Protokoll), s (Sitzungsleitung)
%   beide setzen den Säumniswert für die Anwesenheit auf „x“ und rufen |\...| auf, was in der Person
%   einen Schalter setzt und die Person in der Liste für Protokoll/Sitzungsleitung einträgt.
%
%   Verschiedene Anwesenheitsmarker können als Schlüssel unter \emph{/prot/attendance/} angelegt werden.
%   Jede Gruppe ist implementiert als Menge an Personen. Zudem ist unter
%   \texttt{/prot/person/\meta{id}/group} die primäre Gruppe hinterlegt, wobei spätere Angaben vorherige überschreiben.
%
%   TODO: Implementiere mehrere Zeilen für eine Person.
%   TODO: Momentan wird der attendance-Schlüssel gar nicht genutzt. specials ebenso.
%    \begin{macrocode}
%<*package>
	\cs_new:Nn \@@_parse_attendance:n {
		\str_new:c { g_\l@@_person_str/specials_str }
		\keys_set:nn { prot / attendance } { value =, fallback = u, #1 }
		\str_if_empty:NT \l@@_attendance_str { \str_set_eq:NN \l@@_attendance_str \l@@_attendance_fallback_str }
	}
	\cs_new:Nn \@@_set_attendance: {
		\bool_new:c { g_\l@@_person_str/there_bool }
		\keys_set:nV { prot / attendance / use } \l@@_attendance_str
		\@@_provide:Ncn \tl_const:cv { c_\l@@_person_str/attendance/disp_tl } { c_\l@@_person_str/attendance_str }
	}
	\keys_define:nn { prot / attendance } {
		, value .str_set:N = \l@@_attendance_str
		, fallback .str_set:N = \l@@_attendance_fallback_str
		, specials .code:n = { \str_gput_right:cn { g_ \l@@_person_str / specials_str } {#1} }
		, attendance .code:n = { \str_const:cn { c_ \l@@_person_str / attendance_str } {#1} }
		, attendance/disp .code:n = { \tl_const:cn { c_ \l@@_person_str / attendance/disp_tl } { \exp_not:n{#1} } }
		, there .code:n = { \bool_gset:cn { g_ \l@@_person_str / there_bool } { \int_compare_p:nNn {#1} > 0 } }
		, x .meta:n = { value = x }, use/x .meta:n = { attendance = x, there = 1 }
		, e .meta:n = { value = e }, use/e .meta:n = { attendance = e, there = 0 }
		, u .meta:n = { value = u }, use/u .meta:n = { attendance = u, there = 0 }
		, d .meta:n = { value = d }, use/d .meta:n = { attendance = d, there = 1, attendance/disp = \emph x }
		, p .meta:n = { fallback = x, specials = p }
		, s .meta:n = { fallback = x, specials = s }
	}
%</package>
%    \end{macrocode}
%   Testing Attendance parsing and setting.
%    \begin{macrocode}
%<*test|expect>
\TEST { \@@_parse_attendance:n , \@@_set_attendance: } {
%<*test>
	\cs_new:Nn \@@_test_attendance_i:nnn {
		\str_set:Nn \l@@_person_str {prot_person_/#1}
		\@@_parse_attendance:n {#2}
		\TYPE { \l@@_attendance_str }
	}
	\cs_new:Nn \@@_test_attendance:nnnnn {
		\str_set:Nn \l@@_person_str {prot_person_/#1}
		\@@_parse_attendance:n {#2}
		\@@_set_attendance:
		\TYPE { attendance = \str_use:c { c_prot_person_/#1/attendance_str } }
		\TYPE { there = \bool_to_str:c { g_prot_person_/#1/there_bool } }
		\TYPE { disp = \tl_use:c { c_prot_person_/#1/attendance/disp_tl } }
	}
%</test>
%<*expect>
	\cs_new:Nn \@@_test_attendance_i:nnn { \TYPE {#3} }
	\cs_new:Nn \@@_test_attendance:nnnnn { \TYPE {attendance=#3} \TYPE {there=#4} \TYPE {disp=#5} }
%</expect>
	\@@_test_attendance_i:nnn A { x } { x }
	\@@_test_attendance_i:nnn B { p } { x }
	\@@_test_attendance_i:nnn C { u } { u }
	\@@_test_attendance_i:nnn D { d } { d }
	\@@_test_attendance_i:nnn E { x, e } { e }
	\@@_test_attendance_i:nnn F { e, x } { x }
	\@@_test_attendance:nnnnn G { x } x { true } { x }
	\@@_test_attendance:nnnnn H { p } x { true } { x }
	\@@_test_attendance:nnnnn I { u } u { false } { u }
	\@@_test_attendance:nnnnn J { d } d { true } { \exp_not:N\emph x }
	\@@_test_attendance:nnnnn K { x, e } e { false } { e }
	\@@_test_attendance:nnnnn L { e, x } x { true } { x }
}
%</test|expect>
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_apply_group:n}
%    \begin{macrocode}
%<*package>
	\cs_new:Nn \@@_apply_group:n {
		\str_new:c { g_\l@@_person_str / group_str }
		\keys_set:nn { prot / group } {#1}
		\@@_provide:Ncn \cs_new:cn { \l@@_person_str / aftermove:N } { }
	}
	\keys_define:nn { prot / group } {
		, voter .code:n = { \cs_new:cpn { \l@@_person_str / aftermove:N } { \@@_move_voter:N } }
		, groupvoter .code:n = { \@@_make_groupvoter:Vn \l@@_id_str {#1} }
		, group .code:n = {
			\str_gset:cn { g_ \l@@_person_str / group_str } {#1}
			\seq_gput_right:cV { g_prot_group_#1_seq } \l@@_id_str
		}
		, votergroup .meta:n = { group = #1, groupvoter = #1 }
		, info .code:n = { \tl_const:cn { \l@@_person_str / info_tl } {#1} }
		, g .meta:n = { group = gast, info = #1 }
		% StuPa
		, stupa .meta:n = { group = stupa, voter }
		, fsma .meta:n = { group = fsma }
		, reffs .meta:n = { group = reffs }
		% AStA
		, refvor .meta:n = { votergroup = refvor }
	}
	\seq_new:N \g_prot_group_gast_seq
	\seq_new:N \g_prot_group_stupa_seq
	\seq_new:N \g_prot_group_fsma_seq
	\seq_new:N \g_prot_group_reffs_seq
	\seq_new:N \g_prot_group_refvor_seq
	\seq_new:N \g_prot_votergroup_refvor_seq
	\int_new:N \g_prot_voters_int
	\cs_new:Nn \@@_move_voter:N {
		\bool_if:NTF {#1}
			{ \int_gincr:N \g_prot_voters_int }
			{ \int_gdecr:N \g_prot_voters_int }
	}
	\cs_new:Nn \@@_make_groupvoter:nn {
		\cs_new:cpn { prot_person_/ #1 / aftermove:N } { \@@_move_groupvoter:nnN {#1} {#2} }
	}
	\cs_generate_variant:Nn \@@_make_groupvoter:nn { Vn }
	\cs_new:Nn \@@_move_groupvoter:nnN {
		\bool_if:NTF #3
			\@@_enter_groupvoter:cn
			\@@_leave_groupvoter:cn
		{ g_prot_votergroup_#2_seq } {#1}
	}
	\cs_new:Nn \@@_leave_groupvoter:Nn {
		\seq_if_in:NnTF #1 {#2} {
			\seq_gremove_all:Nn #1 {#2}
			\seq_if_empty:NT #1 {
				\int_gdecr:N \g_prot_voters_int
			}
		} {
			\msg_error:nnn { prot } { move / wrong-groupvoter } {#2}
		}
	}
	\cs_new:Nn \@@_enter_groupvoter:Nn {
		\seq_if_in:NnTF #1 {#2} {
			\msg_error:nnn { prot } { move / wrong-groupvoter } {#2}
		} {
			\seq_if_empty:NT #1 {
				\int_gincr:N \g_prot_voters_int
			}
			\seq_gput_right:Nn #1 {#2}
		}
	}
	\cs_generate_variant:Nn \@@_leave_groupvoter:Nn { c }
	\cs_generate_variant:Nn \@@_enter_groupvoter:Nn { c }
%</package>
%    \end{macrocode}
%   For tests see at the very end.
% \end{macro}
% \begin{macro}{\prot_move:nN, \@@_initialize_move:}
%   Momentane Implementierung: Alle Menschen kommen automatisch, wenn sie mit |x| oder dergleichen angelegt sind.
%   Beim Einlesen der |.aux|-Datei gehen alle, deren erste Interaktion ein Kommen ist.
%   Bei allen späteren Bewegungen prüfe, ob dies die erste Bewegung ist und falls diese ein Kommen ist, schreibe in die |.aux|-Datei ein (nicht als erste Bewegung zählendes Gehen (siehe vorheriger Punkt)).
%   Bei einer nicht-ersten Bewegung hingegen verifiziere, dass diese das Gegenteil der vorherigen Anwesenheit ist.
%
%   \cs{prot_move:nN} setzt momentane Anwesenheit von #1=\meta{id} auf |#2|.
%   Ruft dazu lediglich |/prot/person/#1/move| auf, was beim ersten Aufruf ggf. in die |.aux|-Datei schreibt und bei späteren Aufrufen auf Konsistenz prüft.
%   Nutzt |forcemove| ohne Tests, |firstmove| und |latermove| sowie – als Hook – |aftermove|.
%   \NB{Beim ersten Kompilieren produziert |firstmove| Schrott, da die Verspäteten dann zweimal hintereinander (bei Initialisierung und jetzt) kommen. Könnte man beheben, aber wozu. Bei späterem Kompilieren darf |firstmove| korrekterweise immer |forcemove| aufrufen.}
%    \begin{macrocode}
%<*package>
	\cs_new:Nn \prot_move:nN {
		\tl_case:cnF { g_prot_person_/#1/moves_tl } {
			- { \msg_error:nnn { prot } { move / not-there } {#1} }
			0 {
				\tl_gset:cn { g_prot_person_/#1/moves_tl } {1}
				\bool_if:NT #2 { \@@_addlate:n {#1} }
				\@@_forcemove:nN {#1} #2
			}
		} {
			\bool_xor:nnTF { \bool_if_p:c { g_prot_person_/#1/there_bool } } {#2} {
				\@@_forcemove:nN {#1} #2
			} { \exp_args:Nnx \msg_error:nnn { prot } { move / \bool_to_str:n {#2} - again } {#1} }
		}
	}
	\cs_new:Nn \@@_initialize_move: {
		\tl_new:c { g_\l@@_person_str/moves_tl }
		\tl_gset:cn { g_\l@@_person_str/moves_tl } 0
		\bool_if:cTF { g_\l@@_person_str/there_bool }
			{ \use:c { \l@@_person_str/aftermove:N } \c_true_bool }
			{ \tl_gset:cn { g_\l@@_person_str/moves_tl } - }
	}
	\cs_new:Nn \@@_forcemove:nN {
		\bool_gset_eq:cN { g_prot_person_/#1/there_bool } #2
		\use:c { prot_person_/#1/aftermove:N } #2
	}
	\cs_new:Nn \@@_addlate:n {
		\iow_now:Nn \@mainaux { \@@_makelate:n {#1} }
	}
	\cs_new:Nn \@@_makelate:n {
		\@@_forcemove:nN {#1} \c_false_bool
	}
%</package>
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\prot_voting:n, \prot_simple_voting:n}
%   Nimmt eine tokenlist als Argument und lässt ein Ergebnis im Input Stream.
%   \cs{prot_simple_voting:n} tut dies direkt, wohingegen \cs{prot_voting:n} noch etwas mehr erledigt:`
%   Enthält die tokenlist nur Zahlen, gebe das Ergebnis aus und überprüfe zudem, ob die Summe der Zahlen gleich der momentanen Anzahl Stimmberechtigter ist.
%   Enthält die tokenlist einen Stern und sonst nur Zahlen, so ersetze den Stern so durch eine Zahl, dass die Summe wie im vorigen Satz passt.
%   In allen anderen Fällen gibt es einen Fehler.
%    \begin{macrocode}
%<*package>
	\int_new:N \l@@_votes_int
	\int_new:N \l@@_votes_stars_int
	\seq_new:N \l@@_result_seq
	\tl_const:Nn \c_prot_vote_sep_tl { \exp_not:N\, / \exp_not:N\, }
	\cs_new:Nn \prot_voting:n {
		\int_zero:N \l@@_votes_int
		\int_zero:N \l@@_votes_stars_int
		\seq_clear:N \l@@_result_seq
		\tl_map_inline:nn {#1} {
			\str_if_eq:nnTF {##1} * {
				\int_incr:N \l@@_votes_stars_int
				\seq_put_right:Nn \l@@_result_seq { \int_eval:n { \g_prot_voters_int - \l@@_votes_int } }
			} {
				\int_add:Nn \l@@_votes_int {##1}
				\seq_put_right:Nn \l@@_result_seq {##1}
			}
		}
		\bool_if:nT {
			\int_compare_p:nNn \l@@_votes_stars_int = 0
			&& ! \int_compare_p:nNn \l@@_votes_int = \g_prot_voters_int
		} {
			\msg_warning:nnxxx { prot } { voting / wrong-count }
				{ \seq_use:Nn \l@@_result_seq + }
				{ \int_use:N \l@@_votes_int }
				{ \int_use:N \g_prot_voters_int }
		}
		\int_compare:nNnTF \l@@_votes_stars_int < 2
			{ \@@_simple_seq_voting:N \l@@_result_seq }
			{ \msg_error:nnn { prot } { voting / super-stars } {#1} }
	}
	\cs_new:Nn \@@_simple_seq_voting:N { ( \seq_use:Nn #1 \c_prot_vote_sep_tl ) }
	\cs_new:Nn \prot_simple_voting:n { ( \@@_tl_use:nn {#1} \c_prot_vote_sep_tl ) }
%</package>
%    \end{macrocode}
% Tests:
%    \begin{macrocode}
%<*test|expect>
	\group_begin:
	\TEST { \prot_voting:n } {
%<*test>
	\cs_set_eq:NN \@@_test_simple_seq_voting:N \@@_simple_seq_voting:N
	\cs_set:Nn \@@_simple_seq_voting:N { \exp_args:Nx \TYPE { \@@_test_simple_seq_voting:N \l@@_result_seq } }
	\cs_new:Nn \@@_test_voting:nn { \prot_voting:n {#1} }
	\cs_new:Nn \@@_test_voting:nnn { \@@_test_voting:nn {#1} {} }
%</test>
%<*expect>
	\cs_new:Nn \@@_test_voting:nn { \TYPE { \prot_simple_voting:n {#2} } }
	\cs_new:Nn \@@_test_voting:nnn { #3 \@@_test_voting:nn {} {#2} }
%</expect>
	\@@_test:nn { \prot_simple_voting:n {abc} } { ( a \c_prot_vote_sep_tl b \c_prot_vote_sep_tl c ) }
	\@@_test:nn { \prot_simple_voting:n {a} } { ( a ) }
	\@@_test:nn { \prot_simple_voting:n {} } { ( ) }
	\int_gset:Nn \g_prot_voters_int { 21 }
	\@@_test_voting:nn { 0123456 } { 0123456 }
	\@@_test_voting:nn { 012345* } { 0123456 }
	\@@_test_voting:nn { 0123*56 } { 0123456 }
	\@@_test_voting:nn { 0*23456 } { 0123456 }
	\@@_test_voting:nn { *123456 } { 0123456 }
	\@@_test_voting:nn { 5{10}* } { 5{10}6 }
	\@@_test_voting:nn { *1 } { {20}1 }
	\@@_test_voting:nn { * } { {21} }
	\@@_test_voting:nnn{ 1123456 } { 1123456 } { \msg_warning:nnnnn { prot } { voting / wrong-count } { 1+1+2+3+4+5+6 } { 22 } { 21 } }
	\@@_nontest:nn { \prot_voting:n { *12345* } } { \msg_error:nnn { prot } { voting / super-stars } { *12345* } }
	\int_gzero:N \g_prot_voters_int
	}
	\group_end:
%</test|expect>
%    \end{macrocode}
% \end{macro}
% Zusätzliche Kernel-Funktionen:
%    \begin{macrocode}
%<*package>
	\cs_new:Nn \@@_tl_use:nn {
		\tl_head:n {#1} \exp_args:Ne \tl_map_tokens:nn { \tl_tail:n {#1} } { \use:nn {#2} }
	}
	\cs_new:Nn \@@_seq_to_tl:N { \seq_map_function:NN #1 \@@_exp_not_braced:n }
	\cs_new:Nn \@@_exp_not_braced:n { \exp_not:n { {#1} } }
	\regex_const:Nn \c@@_alph_regex { \A[A-Za-z]*\Z }
	\cs_new:Npn \@@_tl_if_alphabetic:nTF { \regex_match:NnTF \c@@_alph_regex }
	\cs_new:Npn \@@_provide:Ncn #1#2#3 { \cs_if_exist:cF {#2} { #1 {#2} {#3} } }
	\cs_new:Npn \@@_provide:Nc #1#2 { \cs_if_exist:cF {#2} { #1 {#2} } }
	\cs_generate_variant:Nn \tl_range:nnn { nne }
	\cs_generate_variant:Nn \tl_const:Nn { cv }
	\cs_generate_variant:Nn \msg_error:nnnnn { nnnnV }
%</package>
%    \end{macrocode}
% Fehlermeldungen:
%    \begin{macrocode}
%<*package>
	\msg_new:nnnn { prot } { persontable / col-count } { Die~Personentabellenzeile~'#1'~enthält~#2~statt~6~Spalten. } { In~jeder~Spalte~müssen~genau~5~\&-Zeichen~stehen. }
	\msg_new:nnnn { prot } { person / malformed-id } { Die~ID~'#1'~ist~böse. } { Ids~dürfen~nur~die~Buchstaben~A-Z~und~a-z~enthalten.~Keine~Umlaute~oder~sonstigen~Schnickschnack. }
	\msg_new:nnn  { prot } { person / id-exists } { Die~ID~'#1'~ist~bereits~an~jemand~anderen~vergeben. }
	\msg_new:nnn  { prot } { person / id-iscsname } { Die~ID~'#1'~existiert~bereits~als~LaTeX-Makro. }
	\msg_new:nnnn { prot } { person / name-exists } { Der~Name~'#1'~für~'#2'~ist~bereits~an~'#3'~vergeben. } { Dies~könnte~Teile~der~Bevölkerung~verwirren. }
	\msg_new:nnnn { prot } { move / wrong-groupvoter } { Programmierfehler:~'#1'~bewegt~sich~illegal. } { Eigentlich~sollte~dies~vorher~abgefangen~werden. }
	\msg_new:nnnn { prot } { move / not-there } { '#1'~bewegt~sich,~war~aber~gar~nicht~auf~der~Sitzung. } { Vielleicht~war~sie~doch~anwesend? }
	\msg_new:nnnn { prot } { move / 0-again } { '#1'~geht~zwei~mal~hintereinander. } { Vielleicht~kam~sie~zwischendrin~wieder? }
	\msg_new:nnnn { prot } { move / 1-again } { '#1'~kommt~zwei~mal~hintereinander. } { Vielleicht~ging~sie~zwischendrin~wieder? }
	\msg_new:nnnn { prot } { voting / wrong-count } { Von~#3~anwesenden~Stimmberechtigten~haben~#1=#2~abgestimmt. } { Falls~das~so~richtig~ist,~nutze~die~\exp_not:N\Erg-Funktion. }
	\msg_new:nnnn { prot } { voting / super-stars } { Das~Abstimmungsergebnis~'#1'~enthält~zu~viele~Sterne. } { Es~kann~nur~einen~*S*t*a*r*~geben. }
%</package>
%    \end{macrocode}
% Integration Tests:
%    \begin{macrocode}
%<*test|expect>
\TEST { \@@_apply_group:n, \prot_move:n } {
	\setcounter{errorcontextlines}{100}
	\cs_new:Npn \@@_test_seq_use:c #1 { \seq_use:cn {#1} , }
	\cs_new:Npn \@@_test_use_if_exist:Nc #1#2 { \cs_if_exist:cT {#2} { #2 = #1 { #2 } } }
%<*test>
	\cs_new:Nn \@@_test_group:nnnnnnn {
		\str_set:Nn \l@@_id_str {#1}
		\str_set:Nn \l@@_person_str { prot_person_/#1 }
		\cs_if_exist:cF { c_prot_person_/#1/id_str } {
			\str_const:cn { c_prot_person_/#1/id_str } {#1}
			\bool_new:c  { g_prot_person_/#1/there_bool }
		}
		\bool_gset:cn { g_prot_person_/#1/there_bool } { ! \str_if_eq_p:nn {#2} 0 }
		\@@_apply_group:n {#3}
		\TYPE { group = \str_use:c { g_prot_person_/#1/group_str } }
		\TYPE { \@@_test_use_if_exist:Nc \@@_test_seq_use:c { g_prot_group_#4_seq } }
		\@@_initialize_move:
		\TYPE { \#voters = \int_use:N \g_prot_voters_int }
		\TYPE { \@@_test_use_if_exist:Nc \@@_test_seq_use:c { g_prot_votergroup_#4_seq } }
	}
	\cs_new:Nn \@@_test_move:nNnnn {
		\prot_move:nN {#1} {#2}
		\TYPE { there = \bool_to_str:c { g_prot_person_/#1/there_bool } }
		\TYPE { \#voters = \int_use:N \g_prot_voters_int }
		\TYPE { \@@_test_use_if_exist:Nc \@@_test_seq_use:c { g_prot_votergroup_#3_seq } }
	}
	\cs_new:Nn \@@_test_show_name:nn {
		\TYPE { \exp_not:n {#1} = \prop_item:Nn \g@@_names_prop {#1} }
	}
	\cs_new:Nn \@@_test_show_person:nnnnn {
		\TYPE { id = \str_use:c { c_prot_person_/#1/id_str } }
		\TYPE { name = \exp_not:v { c_prot_person_/#1/name_tl } }
		\TYPE { group = \str_use:c { g_prot_person_/#1/group_str } }
		\TYPE { attendance = \str_use:c { c_prot_person_/#1/attendance_str } }
		\TYPE { there = \bool_to_str:c { g_prot_person_/#1/there_bool } }
	}
%</test>
%<*expect>
	\cs_new:Nn \@@_test_group:nnnnnnn {
		\TYPE { group = #4 }
		\TYPE { \quark_if_nil:nF {#5} { g_prot_group_#4_seq = #5 } }
		\TYPE { \#voters = #6 }
		\TYPE { \quark_if_nil:nF {#7} { g_prot_votergroup_#4_seq = #7 } }
	}
	\cs_new:Nn \@@_test_move:nNnnn {
		\TYPE { there = \bool_to_str:N #2 }
		\TYPE { \#voters = #4 }
		\TYPE { \tl_if_empty:nF {#3} { g_prot_votergroup_#3_seq = #5 } }
	}
	\cs_new:Nn \@@_test_show_name:nn { \TYPE { \exp_not:n {#1} = #2 } }
	\cs_new:Nn \@@_test_show_person:nnnnn {
		\TYPE { id = #1 }
		\TYPE { name = \exp_not:n{#2} }
		\TYPE { group = #3 }
		\TYPE { attendance = #4 }
		\TYPE { there = #5 }
	}
%</expect>
	\@@_test_group:nnnnnnn { Donaldy } 0 { g }      { gast }  { Donaldy } 0 { \q_nil }
	\@@_test_group:nnnnnnn { Donald  } 1 { g }      { gast }  { Donaldy , Donald } 0 { \q_nil }
	\SEPARATOR
	\@@_test_group:nnnnnnn { Anna    } 0 { stupa }  { stupa } { Anna } 0 { \q_nil }
	\@@_test_group:nnnnnnn { Bea     } 1 { stupa }  { stupa } { Anna , Bea } 1 { \q_nil }
	\@@_test_group:nnnnnnn { Charlie } 1 { stupa }  { stupa } { Anna , Bea , Charlie } 2 { \q_nil }
	\@@_test_group:nnnnnnn { Dora    } 1 { stupa }  { stupa } { Anna , Bea , Charlie , Dora } 3 { \q_nil }
	\SEPARATOR
	\@@_nontest:nn { \@@_makelate:n { Bea } } { }
	\@@_test_move:nNnnn    { Donald  } \c_false_bool { } 2 { }
	\@@_test_move:nNnnn    { Bea     } \c_true_bool  { } 3 { }
	\@@_test_move:nNnnn    { Charlie } \c_false_bool { } 2 { }
	\@@_test_move:nNnnn    { Bea     } \c_false_bool { } 1 { }
	\@@_test_move:nNnnn    { Dora    } \c_false_bool { } 0 { }
	\SEPARATOR
	\@@_test_group:nnnnnnn { Emilie } 0 { refvor }  { refvor } { Emilie } 0 { }
	\@@_test_group:nnnnnnn { Fynn   } 1 { refvor }  { refvor } { Emilie , Fynn } 1 { Fynn }
	\@@_test_group:nnnnnnn { Gerda  } 1 { refvor }  { refvor } { Emilie , Fynn , Gerda } 1 { Fynn , Gerda }
	\@@_test_group:nnnnnnn { Heidi  } 1 { refvor }  { refvor } { Emilie , Fynn , Gerda , Heidi } 1 { Fynn , Gerda , Heidi }
	\SEPARATOR
	\@@_nontest:nn { \@@_makelate:n { Gerda } }
	\@@_nontest:nn { \@@_makelate:n { Heidi } }
	\@@_test_move:nNnnn    { Donald } \c_true_bool  { refvor } 1 { Fynn }
	\@@_test_move:nNnnn    { Heidi  } \c_true_bool  { refvor } 1 { Fynn , Heidi }
	\@@_test_move:nNnnn    { Fynn   } \c_false_bool { refvor } 1 { Heidi }
	\@@_test_move:nNnnn    { Gerda  } \c_true_bool  { refvor } 1 { Heidi , Gerda }
	\@@_test_move:nNnnn    { Gerda  } \c_false_bool { refvor } 1 { Heidi }
	\@@_test_move:nNnnn    { Heidi  } \c_false_bool { refvor } 0 { }
}
\TEST { persontable } {
%<*test>
\begin{persontable}
\\ Nat & Nathan  & Weise    & !!   & stupa & x
\\ NW  & Nathan  & Waise    & !!   & stupa & e
\\     & Ada     & Lovelace &      & stupa & x
\\     & Eva     & Daus     & Eve  & g     & x
\\ Ron & Rönja   & Daus     &      & g     & x
\\
\\     & Evä     & Daus     &      & g     & x
\\     & Roman   & Leser    &      & g     & x
\\     & Ada     & Love     &      & stupa & x
\\ Eva & Eva     & Daus     & Eve  & g     & x
\\     & Nathan  & Weise    & !!   & stupa & u
\end{persontable}
%</test>
%<*expect>
	\msg_error:nnn { prot } { person / malformed-id } { Evä }
	\msg_error:nnn { prot } { person / id-iscsname } { Roman }
	\msg_error:nnn { prot } { person / id-exists } { Ada }
	\msg_error:nnnnn { prot } { person / name-exists } { Eve } { Eva } { Eve }
	\msg_error:nnnnn { prot } { person / name-exists } { Nathan\prot_nbsp: We. } { NathanWe } { Nat }
%</expect>
	\@@_test_show_person:nnnnn { Nat } { Nathan\prot_nbsp: We. } { stupa } { x } { true }
	\@@_test_show_person:nnnnn { NW  } { Nathan\prot_nbsp: Wa. } { stupa } { e } { false }
	\@@_test_show_person:nnnnn { Ada } { Ada } { stupa } { x } { true }
	\@@_test_show_person:nnnnn { Eve } { Eve } { gast  } { x } { true }
	\@@_test_show_person:nnnnn { Ron } { Rönja } { gast  } { x } { true }
	\@@_test_show_name:nn { Nathan\prot_nbsp: We. } { Nat }
	\@@_test_show_name:nn { Ada } { Ada }
	\@@_test_show_name:nn { Eve } { Eve }
	\@@_test_show_name:nn { Rönja } { Ron }
}
%</test|expect>
%    \end{macrocode}
% And the end.
%    \begin{macrocode}
%<*test|expect>
	\ExplSyntaxOff
	\END
%</test|expect>
%    \end{macrocode}
%
% \Finale
\endinput
% vim: sw=4 ts=4 noet fdm=marker foldmarker=\\begin,\\end foldcolumn=3
